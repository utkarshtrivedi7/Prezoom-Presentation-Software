3. You should have a folder named design containing
(a) High-level design document (in HTML).
i. Containing one or more UML class diagrams showing your packages and the
dependence relations between these packages. Also show library packages
or third-party packages that are used.
ii. For each of your packages, a short description of the purpose of the package.
iii. For any third party packages, you use, explain the purpose of the package
and where its documentation can be found.
iv. For each of your packages, one or more class diagrams showing the classes
and interfaces inside the package, associations between them and associations with classes in other packages that are depended on.
v. For each class and interface, a description of the purpose of the class. I.e.,
what it represents or does.
(b) A test plan that explains how you intend to test each package and class.
(c) A short document that explains how to compile and execute your code.

4. You should have a folder named src (or source) that contains your source code.
(a) Each class should be documented using JavaDoc (for Java), TSDoc (for Typescript), or Dox (for Haxe). Each public method should also be documented.

5. You should have a folder named tstsrc (or test-source) that contains your automated
tests. For Java, please use JUnit 5 (or 4). For TypeScript, I recommend using Mocha.
For Haxe, Iâ€™ve used Buddy with success. Your model, and controller should be tested.
Also any classes in the view that it makes sense to test should be tested.